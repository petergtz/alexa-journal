// Code generated by pegomock. DO NOT EDIT.
// Source: github.com/petergtz/alexa-journal/drive (interfaces: FileService)

package journaldrive_test

import (
	pegomock "github.com/petergtz/pegomock"
	"reflect"
)

type MockFileService struct {
	fail func(message string, callerSkip ...int)
}

func NewMockFileService() *MockFileService {
	return &MockFileService{fail: pegomock.GlobalFailHandler}
}

func (mock *MockFileService) Update(content string) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockFileService().")
	}
	params := []pegomock.Param{content}
	result := pegomock.GetGenericMockFrom(mock).Invoke("Update", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockFileService) VerifyWasCalledOnce() *VerifierFileService {
	return &VerifierFileService{mock, pegomock.Times(1), nil}
}

func (mock *MockFileService) VerifyWasCalled(invocationCountMatcher pegomock.Matcher) *VerifierFileService {
	return &VerifierFileService{mock, invocationCountMatcher, nil}
}

func (mock *MockFileService) VerifyWasCalledInOrder(invocationCountMatcher pegomock.Matcher, inOrderContext *pegomock.InOrderContext) *VerifierFileService {
	return &VerifierFileService{mock, invocationCountMatcher, inOrderContext}
}

type VerifierFileService struct {
	mock                   *MockFileService
	invocationCountMatcher pegomock.Matcher
	inOrderContext         *pegomock.InOrderContext
}

func (verifier *VerifierFileService) Update(content string) *FileService_Update_OngoingVerification {
	params := []pegomock.Param{content}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Update", params)
	return &FileService_Update_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type FileService_Update_OngoingVerification struct {
	mock              *MockFileService
	methodInvocations []pegomock.MethodInvocation
}

func (c *FileService_Update_OngoingVerification) GetCapturedArguments() string {
	content := c.GetAllCapturedArguments()
	return content[len(content)-1]
}

func (c *FileService_Update_OngoingVerification) GetAllCapturedArguments() (_param0 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
	}
	return
}
